apply plugin: 'com.android.application'
apply from: 'and_res_guard.gradle'
apply from: 'tinker-support.gradle'
//apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: "androidx.navigation.safeargs"

def bakPath() {
    return file("${buildDir}/bakApk/")
}
println('** build versionName=' + System.properties['Tind'])
/**
 * 此处填写每次构建生成的基准包目录
 */
static def baseApkDir() {
    return "resguard-0503-10-57-50"
}

static def detailedBuildTime() {
    return new Date().format("MMdd-HH-mm-ss", TimeZone.getTimeZone("GMT+8"))
}

def appName() {
    return "${project.getName()}"
}

//获取版本名
def verName() {
    def versionPropsFile = file("../version.properties")
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        return versionProps['VERSION_NAME']
    } else {
        throw new GradleException("Could not read gradle.properties")
    }
}
//获取版本号
def verCode() {
    def versionPropsFile = file("../version.properties")
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        int verCode = versionProps['VERSION_CODE'].toInteger()
        return verCode
    } else {
        throw new GradleException("Could not read gradle.properties")
    }
}

android {
    signingConfigs {
        config {
            keyAlias 'tind'
            keyPassword '23259895'
            storeFile file('C:/tind/tind.jks')
            storePassword '23259895'
        }
    }
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion project.BUILD_TOOLS_VERSION
    defaultConfig {
        applicationId "com.liang.tind.www.tindtest"
        minSdkVersion MIN_SDK_VERSION.toInteger()
        targetSdkVersion TARGET_SDK_VERSION.toInteger()
        versionCode verCode()
        versionName verName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

//        ndk {
//            abiFilters 'armeabi-v7a'
//        }
    }
    //recommend
    dexOptions {
        jumboMode = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
            signingConfig signingConfigs.config
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['assets']
        }
    }
    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name


        tasks.all {

            if (variant.buildType.name == 'release') {

                def andResDir = "${buildDir}/outputs/apk/${taskName}/AndResGuard_${project.getName()}-${taskName}";

                if ("tinkerPatch${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                    // find resguard task
                    def resguardTask
                    tasks.all {
                        if (it.name.startsWith("resguard${taskName.capitalize()}")) {
                            resguardTask = it
                        }
                    }
                    it.doFirst({
                        // change build apk path
                        it.buildApkPath = "${andResDir}/${project.getName()}-${taskName}_aligned_signed.apk"
                    })

                    // change task dependence to resguard task
                    it.dependsOn resguardTask

                }

                if ("resguard${taskName.capitalize()}".equalsIgnoreCase(it.name)) {
                    it.doLast {
                        copy {
                            def outDir = file("${bakPath()}/resguard-${detailedBuildTime()}")

                            from "${andResDir}/${project.getName()}-${taskName}_aligned_signed.apk"
                            into outDir
                            rename { String fileName ->
                                fileName.replace("${project.getName()}-${taskName}_aligned_signed.apk", "${appName()}.apk")
                            }

                            from "${buildDir}/outputs/mapping/${taskName}/mapping.txt"
                            into outDir
                            rename { String fileName ->
                                fileName.replace("mapping.txt", "${appName()}-mapping.txt")
                            }

                            from "${buildDir}/intermediates/symbols/${taskName}/R.txt"
                            into outDir
                            rename { String fileName ->
                                fileName.replace("R.txt", "${appName()}-R.txt")
                            }

                            from "${andResDir}/resource_mapping_${project.getName()}-release.txt"
                            into outDir
                            rename { String fileName ->
                                fileName.replace("resource_mapping_${project.getName()}-release.txt", "${appName()}-resource_mapping.txt")
                            }
                        }
                    }
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'org.java-websocket:Java-WebSocket:1.3.8'
    //注解
    implementation 'com.jakewharton:butterknife:10.1.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.1.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    //rxjava
    implementation files('libs/facetracking.jar')
    implementation 'com.tencent.bugly:crashreport_upgrade:1.3.5'
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    implementation 'com.tencent.tinker:tinker-android-lib:1.9.6'
    implementation 'com.tencent.bugly:nativecrashreport:3.3.1'
    implementation 'com.maxwell.imkid:library:1.3.4'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.17'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.2'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'
    implementation 'com.orhanobut:logger:2.2.0'
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.42'
//    implementation 'androidx.cardview:cardview:1.0.0'
//    implementation 'android.arch.navigation:navigation-fragment:1.0.0-alpha06'
    //    implementation 'android.arch.navigation:navigation-fragment:1.0.0-alpha06'
    //    implementation "android.arch.navigation:navigation-fragment:$nav_version"
    //    implementation "android.arch.navigation:navigation-ui:$nav_version"
    //    implementation "com.google.guava:guava:23.0-android"
}
